return function(scriptKey)
    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local StarterGui = game:GetService("StarterGui")

    -- Ensure the game is loaded
    repeat wait() until game:IsLoaded()
    wait(2)

    -- Get the LocalPlayer's username and Client ID (HWID)
    local player = Players.LocalPlayer
    local username = player and player.Name or "Unknown"
    local clientId = game:GetService("RbxAnalyticsService"):GetClientId()

    -- Decode Base64 encoded URLs
    local function decodeBase64(data)
        return game:GetService("HttpService"):Base64Decode(data)
    end

    -- Define the Base64 encoded URL of your Discord webhook
    local webhookURL = decodeBase64("aHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTI4MTc0NDcwNzMyMzY5NTE1Ni9Cc0IwLTJkcnVWUXVHYXFmTEJDc1c2SmQ3Nm9vTUVoMGQtdmhlaEV5UDBVS2U0YUpwdVVGMGdUaGhFRENnSUJTTUlObg==")

    -- Set clipboard to the Client ID (if required)
    setclipboard(clientId)

    -- Base64 encoded URL for the JSON file containing key statuses
    local jsonUrl = decodeBase64('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JhbmRvbXByb2plY3Rzcy9Db3N0bHlTdHlsaXNoQ29tcHV0aW5nL3JlZnMvaGVhZHMvbWFpbi9rZXlzLmpzb24=')

    -- Base64 encoded URL for the external script
    local scriptUrl = decodeBase64('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JhbmRvbXByb2plY3Rzcy9yYW5kb20vcmVmcy9oZWFkcy9tYWluL3Vyc2NyaXB0')

    -- Function to send a message to the Discord webhook
    local function sendWebhookMessage(content)
        local message = {
            content = content,
            username = "Meta",
            avatar_url = "https://www.roblox.com/asset/?id=1234567890" -- Custom avatar (optional)
        }

        local jsonData = HttpService:JSONEncode(message)
        local headers = {
            ["Content-Type"] = "application/json"
        }

        local success, response = pcall(function()
            local httpRequest = http_request or request or syn.request or HttpService.RequestAsync
            return httpRequest({
                Url = webhookURL,
                Method = "POST",
                Headers = headers,
                Body = jsonData
            })
        end)

        if success then
            print("Message sent successfully.")
        else
            warn("Failed to send message:", response)
        end
    end

    -- Function to fetch and parse JSON data with cache-busting
    local function fetchAndParseJson(url)
        local cacheBuster = tostring(os.time())
        local fullUrl = url .. "?t=" .. cacheBuster

        local success, jsonData = pcall(function()
            return game:HttpGet(fullUrl)
        end)

        if not success then
            warn("Failed to fetch JSON data: " .. jsonData)
            return nil
        end

        local parsedData
        success, parsedData = pcall(function()
            return HttpService:JSONDecode(jsonData)
        end)

        if not success then
            warn("Failed to parse JSON data: " .. parsedData)
            return nil
        end

        return parsedData
    end

    -- Refresh mechanism
    local refreshInterval = 600 -- 10 minutes
    local lastFetchTime = 0
    local validKeys = {}

    local function refreshData()
        local currentTime = os.time()
        if currentTime - lastFetchTime >= refreshInterval then
            print("Refreshing data...")
            validKeys = fetchAndParseJson(jsonUrl)
            if validKeys then
                print("Data refreshed successfully.")
            else
                print("Failed to refresh data.")
            end
            lastFetchTime = currentTime
        end
    end

    -- Function to check if the provided key is valid (redeemed) and HWID matches
    local function isValidKeyAndHWID(key)
        local keyData = validKeys[key]
        if keyData then
            print("Key found.")
            if keyData.status == "redeemed" then
                local requiredHwid = keyData.hwid
                print("Checking HWID...")
                if requiredHwid == nil or requiredHwid == clientId then
                    print("HWID matches.")
                    return true
                else
                    print("HWID mismatch: Required:", requiredHwid, "Provided:", clientId)
                end
            else
                print("Key is not redeemed.")
            end
        else
            print("Key not found in.")
        end
        return false
    end

    -- Function to show notification to the player
    local function showNotification(title, text)
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Duration = 5 -- Duration of the notification in seconds
        })
    end

    -- Check if the scriptKey is valid (redeemed) and HWID matches
    refreshData() -- Ensure data is fresh before checking
    local whitelisted = isValidKeyAndHWID(scriptKey)

    if whitelisted then
        print("Success: You are whitelisted!") -- Console success message
        showNotification("Success", "You are whitelisted!")

        -- Fetch and execute the external script
        local scriptContent = game:HttpGet(scriptUrl)

        -- Safely execute the script
        local scriptFunction, errorMessage = loadstring(scriptContent)

        if scriptFunction then
            scriptFunction()
        else
            warn("Failed to load external script: " .. errorMessage)
        end

        -- Notify via Discord webhook
        sendWebhookMessage("User: " .. username .. "\nClient ID: " .. clientId .. "\nScript Key: " .. scriptKey .. "\nStatus: Whitelisted")
    else
        -- Kick the player with a custom message
        print("Player not whitelisted. Kicking...")
        player:Kick("Key is linked to a different HWID. Use the command `.resethwid` to reset your HWID.")

        -- Notify via Discord webhook
        sendWebhookMessage("User: " .. username .. "\nClient ID: " .. clientId .. "\nScript Key: " .. scriptKey .. "\nStatus: Not Whitelisted")
    end
end
